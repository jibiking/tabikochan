<style>
 * {
  color: #fff;
  font-family: 'Kiwi Maru', serif;
 }

  /* レイアウト */
  .title_wrapper {
    position: absolute;
    top: 115px;
    left: 140px;
  }
  .desc_wrapper {
    position: absolute;
    top: 575px;
    left: 170px;
    width: 580px;
    text-shadow: 0 0 0.12em rgba(0,0,0,1);
  }
  .form_wrapper {
    top: 130px;
    position: absolute;
    left: 1015px;
  }

  .form_body {
    width: 180%;
  }

  .button_wrapper {
    text-align: center;
    margin-top: 80px;
  }

  body {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background: url("<%= asset_path('tabikochan.png') %>") no-repeat center/cover;
    font-family: Arial, sans-serif;
    overflow: hidden;
  }
  #canvas {
    width: 62%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background: #FDF8B5;
  }

  /* タイトル */
  .title_img {
    width: 650px;
    height: 490px;
  }

  /* テキストフィールド */
  .cp_iptxt {
    position: relative;
    margin: 60px 3%;
  }
  .cp_iptxt input[type='text'] {
    font: 15px/24px sans-serif;
    box-sizing: border-box;
    width: 100%;
    letter-spacing: 1px;
    padding-left: 4em;
  }
  .cp_iptxt input[type='text']:focus {
    outline: none;
  }
  .ef {
    padding: 4px 0;
    border: 0;
    border-bottom: 1px solid #E4E3D4;
    background-color: transparent;
  }
  .ef ~ .focus_line {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    transition: 0.4s;
    background-color: #FFF570;
  }
  .ef:focus ~ .focus_line,
  .cp_iptxt.ef ~ .focus_line {
    width: 100%;
    transition: 0.4s;
  }
  .ef ~ label {
    position: absolute;
    z-index: -1;
    top: 4px;
    left: 0;
    width: 100%;
    transition: 0.3s;
    letter-spacing: 0.5px;
    color: #E4E3D4;
  }
  .ef:focus ~ label, .cp_iptxt.ef ~ label {
    font-size: 12px;
    top: -16px;
    transition: 0.3s;
    color: #FFF570;
  }
  /* テキストフィールド↑ */


  /* ボタン */
  .cp_button01 {
	position: relative;
	z-index: 1;
	display: inline-block;
	width: 160px;
	padding: 1em;
  margin-left: 10px;
	line-height: 1.4em;
	cursor: pointer;
	user-select: none;
	transition: transform 0.2s, color 0.2s;
	-webkit-transform: translate(0.5em -0.4em);
	        transform: translate(0.5em -0.4em);
	color: #FFED00;
  font-size: 16px;
	border: 1px solid #FFF570;
	border-radius: 0;
	background: transparent;
  }
  .cp_button01:before {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: 100%;
    content: '';
    transition: transform 0.2s, background-color 0.2s;
    -webkit-transform: translate(0.6em, -0.3em);
            transform: translate(0.6em, -0.3em);
    background-color: rgba(255,245,112,0.5);
  }
  .cp_button01:hover {
    -webkit-transform: translate(0.2em, -0.1em);
            transform: translate(0.2em, -0.1em);
    color: #ffffff;

  }
  .cp_button01:hover:before {
    -webkit-transform: translate(-0.4em, 0.4em);
            transform: translate(-0.4em, 0.4em);
  }
  .cp_button01:active {
    transition-duration: 0.1s;
    -webkit-transform: translate(0, 0);
            transform: translate(0, 0);
  }
  .cp_button01:active:before {
    transition-duration: 0.1s;
    -webkit-transform: translate(0, 0);
            transform: translate(0, 0);
    background-color: rgba(255,245,112,0.5);
  }
  .cp_button01:focus {
    color: #26c6da;
    border: 1px solid #26c6da;
  }
  .cp_button01:focus:hover {
    color: #ffffff;
  }
  .cp_button01:focus:before {
    background-color: rgba(255,245,112,0.5);
  }
  /* ボタン↑ */
</style>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Kiwi+Maru:wght@300&display=swap" rel="stylesheet">
</head>

<body>
  <canvas id="canvas"></canvas>
  <div class="title_wrapper">
    <h1 class="title">
      <img src="<%= asset_path('title.png') %>" alt="Tabikochan" class="title_img">
    </h1>
  </div>
  <div class="desc_wrapper">
    Tabikochanはルート最適化アプリです。<br>
    与えられた地点をもとに最適なルートを提案し、あなたの旅をサポートします。
  </div>
  <div class="form_wrapper">
    <%= form_with(url: create_direction_path, method: :post, html: { class: "form_body" }) do |form| %>
      <div class="cp_iptxt">
        <%= form.text_field :start_location, id: "start_location", class: "ef", type: "text", placeholder: "" %>
        <label>出発地</label>
        <span class="focus_line"></span>
      </div>

      <div class="cp_iptxt">
        <%= form.text_field :end_location, id: "end_location", class: "ef", type: "text", placeholder: "" %>
        <label>目的地</label>
        <span class="focus_line"></span>
      </div>

      <div class="cp_iptxt">
        <%= form.text_field :waypoint1, id: "waypoint1", class: "ef", type: "text", placeholder: "" %>
        <label>経由地</label>
        <span class="focus_line"></span>
      </div>
      <div class="cp_iptxt">
        <%= form.text_field :waypoint2, id: "waypoint2", class: "ef", type: "text", placeholder: "" %>
        <label>経由地</label>
        <span class="focus_line"></span>
      </div>
      <div class="cp_iptxt">
        <%= form.text_field :waypoint3, id: "waypoint3", class: "ef", type: "text", placeholder: "" %>
        <label>経由地</label>
        <span class="focus_line"></span>
      </div>

      <div class="button_wrapper">
        <%= button_tag "検索", type: "submit", class: "cp_button01" %>
      </div>
    <% end %>
  </div>

  <script>
  var Canvas = document.getElementById('canvas');
  var ctx = Canvas.getContext('2d');

  var resize = function() {
      Canvas.width = Canvas.clientWidth;
      Canvas.height = Canvas.clientHeight;
  };
  window.addEventListener('resize', resize);
  resize();

  var elements = [];
  var presets = {};

  presets.o = function (x, y, s, dx, dy) {
      return {
          x: x,
          y: y,
          r: 12 * s,
          w: 5 * s,
          dx: dx,
          dy: dy,
          draw: function(ctx, t) {
              this.x += this.dx;
              this.y += this.dy;
              
              ctx.beginPath();
              ctx.arc(this.x + + Math.sin((50 + x + (t / 10)) / 100) * 3, this.y + + Math.sin((45 + x + (t / 10)) / 100) * 4, this.r, 0, 2 * Math.PI, false);
              ctx.lineWidth = this.w;
              ctx.strokeStyle = '#03BD53';
              ctx.stroke();
          }
      }
  };

  presets.x = function (x, y, s, dx, dy, dr, r) {
      r = r || 0;
      return {
          x: x,
          y: y,
          s: 20 * s,
          w: 5 * s,
          r: r,
          dx: dx,
          dy: dy,
          dr: dr,
          draw: function(ctx, t) {
              this.x += this.dx;
              this.y += this.dy;
              this.r += this.dr;
              
              var _this = this;
              var line = function(x, y, tx, ty, c, o) {
                  o = o || 0;
                  ctx.beginPath();
                  ctx.moveTo(-o + ((_this.s / 2) * x), o + ((_this.s / 2) * y));
                  ctx.lineTo(-o + ((_this.s / 2) * tx), o + ((_this.s / 2) * ty));
                  ctx.lineWidth = _this.w;
                  ctx.strokeStyle = c;
                  ctx.stroke();
              };
              
              ctx.save();
              
              ctx.translate(this.x + Math.sin((x + (t / 10)) / 100) * 5, this.y + Math.sin((10 + x + (t / 10)) / 100) * 2);
              ctx.rotate(this.r * Math.PI / 180);
              
              line(-1, -1, 1, 1, '#03BD53');
              line(1, -1, -1, 1, '#03BD53');
              
              ctx.restore();
          }
      }
  };

  for(var x = 0; x < Canvas.width; x++) {
      for(var y = 0; y < Canvas.height; y++) {
          if(Math.round(Math.random() * 8000) == 1) {
              var s = ((Math.random() * 5) + 1) / 10;
              if(Math.round(Math.random()) == 1)
                  elements.push(presets.o(x, y, s, 0, 0));
              else
                  elements.push(presets.x(x, y, s, 0, 0, ((Math.random() * 3) - 1) / 10, (Math.random() * 360)));
          }
      }
  }

  setInterval(function() {
      ctx.clearRect(0, 0, Canvas.width, Canvas.height);

      var time = new Date().getTime();
      for (var e in elements)
      elements[e].draw(ctx, time);
  }, 10);
  </script>
</body>